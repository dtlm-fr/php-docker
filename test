#!/usr/bin/env bash
set -o pipefail

PHP_VERSION=${1}
CLI_IMAGE=${2:-jtreminio/php-cli:${PHP_VERSION}}
FPM_IMAGE=${3:-jtreminio/php-fpm:${PHP_VERSION}}
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
FAIL='\033[0;31m[FAIL]\033[0m\n'
PASS='\033[0;32m[PASS]\033[0m\n'

if [[ -z "${PHP_VERSION// }" ]]; then
    cat << EOF
Usage: test PHP_VERSION [IMAGE]
Run tests against [IMAGE] Docker image

When IMAGE is not passed, defaults to jtreminio:{PHP_VERSION}

Example: test 7.2
    Runs tests against jtreminio:7.2

Example: test 7.2 jtreminio/php:7.2.test
    Runs tests against jtreminio/php:7.2.test
EOF

    exit 1
fi

run_fpm_container() {
    COMPOSE_PROJECT_NAME=jtreminio-testing \
    FPM_IMAGE=${FPM_IMAGE} docker-compose -f testing/docker-compose-${PHP_VERSION}.yml up -d
}

rm_fpm_container() {
    COMPOSE_PROJECT_NAME=jtreminio-testing \
    docker-compose -f testing/docker-compose-${PHP_VERSION}.yml down -t 1
}

printf "Testing ${CLI_IMAGE} and ${FPM_IMAGE}\n\n"

run_fpm_container

sleep 2

###

printf "[CLI] Check version correct"
EXPECTS="PHP ${PHP_VERSION}"
CMD=$(cat << EOF
docker container run --rm \
  ${CLI_IMAGE} bash -c "php -v"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

printf "[FPM] Check version correct"
EXPECTS="PHP Version ${PHP_VERSION}"
CMD=$(cat << EOF
curl -s jtreminio-testing.localhost/index.php
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check custom INI loaded"
EXPECTS="/etc/php/${PHP_VERSION}/cli/conf.d/98-env.ini"
CMD=$(cat << EOF
docker container run --rm \
  ${CLI_IMAGE} bash -c "php --ini"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

printf "[FPM] Check custom INI loaded"
EXPECTS="/etc/php/fpm-conf.d/98-env.ini"
CMD=$(cat << EOF
curl -s jtreminio-testing.localhost/index.php
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check FPM INI not loaded"
EXPECTS="/etc/php/${PHP_VERSION}/fpm/conf.d/98-env.ini"
CMD=$(cat << EOF
docker container run --rm \
  ${CLI_IMAGE} bash -c "php --ini"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 0 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

printf "[FPM] Check CLI INI not loaded"
EXPECTS="/etc/php/${PHP_VERSION}/cli/conf.d/98-env.ini"
CMD=$(cat << EOF
curl -s jtreminio-testing.localhost/index.php
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 0 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check display_errors set to default value"
EXPECTS='display_errors => Off => Off'
CMD=$(cat << EOF
docker container run --rm \
  ${CLI_IMAGE} bash -c "php -i"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

printf "[FPM] Check display_errors set to default value"
EXPECTS='display_errors</td><td class="v">Off'
CMD=$(cat << EOF
curl -s jtreminio-testing.localhost/index.php
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check display_errors accepts override value"
EXPECTS='display_errors => STDOUT => STDOUT'
CMD=$(cat << EOF
docker container run --rm \
  -e PHP__display_errors=1 \
  ${CLI_IMAGE} bash -c "php -i"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

printf "[FPM] Check display_errors accepts override value"
EXPECTS='display_errors</td><td class="v">On'
CMD=$(cat << EOF
curl -s jtreminio-testing-de.localhost/index.php
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check Xdebug not loaded by default"
EXPECTS='with Xdebug'
CMD=$(cat << EOF
docker container run --rm \
  ${CLI_IMAGE} bash -c "php -v"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 0 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

printf "[FPM] Check Xdebug not loaded by default"
EXPECTS='with Xdebug'
CMD=$(cat << EOF
curl -s jtreminio-testing.localhost/index.php
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 0 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check Xdebug loaded by env var"
EXPECTS='with Xdebug'
CMD=$(cat << EOF
docker container run --rm \
  -e PHP_INI_SCAN_DIR=:/p/xdebug \
  ${CLI_IMAGE} bash -c "php -v"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

printf "[FPM] Check Xdebug loaded by env var"
EXPECTS='with&nbsp;Xdebug'
CMD=$(cat << EOF
curl -s jtreminio-testing-xdebug.localhost/index.php
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check xdebug.remote_host set to default value"
EXPECTS='xdebug.remote_host => host.docker.internal => host.docker.internal'
CMD=$(cat << EOF
docker container run --rm \
  -e PHP_INI_SCAN_DIR=:/p/xdebug \
  ${CLI_IMAGE} bash -c "php -i"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check xdebug.remote_host accepts overriden value"
EXPECTS='xdebug.remote_host => custom.localhost => custom.localhost'
CMD=$(cat << EOF
docker container run --rm \
  -e PHP_INI_SCAN_DIR=:/p/xdebug \
  -e PHP__xdebug__remote_host=custom.localhost \
  ${CLI_IMAGE} bash -c "php -i"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

printf "[FPM] Check xdebug.remote_host accepts overriden value"
EXPECTS='xdebug.remote_host</td><td class="v">custom.localhost'
CMD=$(cat << EOF
curl -s jtreminio-testing-xdebug.localhost/index.php
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check Xdebug CLI auto-sets PHP_INI_SCAN_DIR"
EXPECTS='/p/xdebug/xdebug.ini'
CMD=$(cat << EOF
docker container run --rm \
  ${CLI_IMAGE} bash -c "/usr/bin/xdebug --ini"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check custom INI loaded"
EXPECTS="/etc/php/${PHP_VERSION}/cli/conf.d/99-custom.ini"
CMD=$(cat << EOF
docker container run --rm \
  ${CLI_IMAGE} bash -c "php --ini"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

printf "[FPM] Check custom INI loaded"
EXPECTS="/etc/php/fpm-conf.d/99-custom.ini"
CMD=$(cat << EOF
curl -s jtreminio-testing.localhost/index.php
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
else
    printf " ${PASS}"
fi

rm_fpm_container
